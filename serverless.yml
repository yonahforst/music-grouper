service: music-grouper

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: eu-west-1
  timeout: 15
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:GetItem"
        - "dynamodb:PutItem"
        - "dynamodb:UpdateItem"
        - "dynamodb:DeleteItem"
        - "dynamodb:Query"
        - "dynamodb:BatchWriteItem"
      Resource:
        - "arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:custom.dynamodbTableName}*"
    - Effect: "Allow"
      Action:
        - "ssm:GetParameter"
        - "ssm:PutParameter"
      Resource:
        - "arn:aws:ssm:#{AWS::Region}:#{AWS::AccountId}:parameter/${self:service}/*"
    - Effect: "Allow"
      Action:
        - "SNS:Publish"
      Resource:
        - "arn:aws:sns:#{AWS::Region}:#{AWS::AccountId}:${self:custom.loginSnsTopic}"    
      
  environment:
    DYNAMODB_TABLE_NAME: ${self:custom.dynamodbTableName}
    LOGIN_SNS_TOPIC_ARN: !Ref LoginTopic
    APP_NAME: ${self:service}

custom: 
  dynamodbTableName: ${self:service}-entries
  loginSnsTopic: ${self:service}-service-login

functions:
  loginToServices:
    handler: handler.loginToServices
    timeout: 60
  fetchMessagesCron:
    handler: handler.fetchMessagesCron
    events:
      - schedule: rate(1 hour)
  oauthWebhook:
    handler: handler.oauthWebhook
    events:
      - http: 
          method: ANY
          path: v1/oauth/{serviceName}
  processNewRecord:
    handler: handler.processNewRecord
    events:
      - stream:
          type: dynamodb
          arn: !GetAtt EntriesTable.StreamArn

resources:
 Resources:
  LoginTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: ${self:custom.loginSnsTopic}
  LoginSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: ${file(config.json):snsSubscription.email}
      Protocol: email
      TopicArn: !Ref LoginTopic
  EntriesTable:
    Type: 'AWS::DynamoDB::Table'
    DeletionPolicy: Retain
    Properties:
      AttributeDefinitions:
        -
          AttributeName: id
          AttributeType: S
      KeySchema:
        -
          AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 4
        WriteCapacityUnits: 4
      TableName: ${self:custom.dynamodbTableName}
      StreamSpecification:
        StreamViewType: NEW_IMAGE

plugins:
  - serverless-pseudo-parameters        